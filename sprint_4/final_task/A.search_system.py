"""
ID удачной посылки: 56270557
------------------------------------------------------------------------------------------------------------------------
Задание
------------------------------------------------------------------------------------------------------------------------
Написать поисковую систему.
Имеется n документов, каждый из которых представляет осбой текст из слов. По этим документам требуется построить
поисковый индекс. На вход системе будут подаваться запросы. Запрос - некоторый набор слов. По запросу надо вывести 5
самых релеватных документов. Релевантоность документа оценивается следующим образом: для каждого уникального слова из
запроса берётся число его вхождений в документ, полученные числа для всех слов из запроса суммируются. Итоговая сумма
и является релевантностью документа. Сортировка документов на выдаче производится по убыванию релевантности. Если
релевантность совпадает - то по возрастанию их порядковых номеров в базе.
------------------------------------------------------------------------------------------------------------------------
Описание работы алгоритма
------------------------------------------------------------------------------------------------------------------------
В функции input_data считываем данные. Так как каждый документ представляет строку, то сплитим ее по пробелам, создаем
из нее массив, и этот массив добавляем в обший массив документов. Аналогично поступаем с запросами, но так как по
условию задания берется уникальное слово из запроса, то вместо списка мы создаем из слов множество, тем самым отсекаем
повторы, и тоже добавляем в общий массив запросов.
В функции create_search_index создаем поисковый индекс из списка документов. Логика следующая. Бежим по всем документам,
у каждого документа бежим пословам, это слово и будет ключом в хеш-таблице. У данного ключа будет вложенная структура -
словарь, где ключом будет номер документа, а значением - количество вхождений слова в этот документ.
Основная функция solution. Получаем в ней поисковый индекс. Далее бежим по всем запросам, создаем вспомогательный
словарь для подсчета слов внутри запроса. Из запроса берем по очереди слова и проверяем их вхождение в поисковый индекс.
Если вхождение есть, то складываем значения словарей со счетчиками слов. Таким образом в конце прозода по запроса мы
получаем словарь, в котором ключ номер документа, а значение - релевантность. Сортируем, используя лямбда функцию, и
выводим только 5 элементов. И так далее по всем запросам.
------------------------------------------------------------------------------------------------------------------------
Сложность
------------------------------------------------------------------------------------------------------------------------
Временная - O(n^2)
Пространственная - O(n), где n - количество всех уникальных слов во всех документах (на создание поискового индекса)
Дополнительно - O(m), где m - количество документов подходящих под запрос.
------------------------------------------------------------------------------------------------------------------------
Данные посылки
------------------------------------------------------------------------------------------------------------------------
4.774s 64.30Mb
------------------------------------------------------------------------------------------------------------------------
"""

from typing import Tuple, List, Set, Dict
from collections import Counter


def solution(documents: List[List[str]], queries: List[Set[str]]):
    search_index = create_search_index(documents)

    for i, query in enumerate(queries):
        counter_docs = dict()
        for q in query:
            docs = search_index.get(q)
            if docs:
                if len(counter_docs):
                    counter_docs = Counter(counter_docs) + Counter(docs)
                else:
                    counter_docs = docs
        print(*[k for k, _ in sorted(counter_docs.items(), key=lambda x: (-x[1], x[0]))][:5])


def create_search_index(docs: List[List[str]]) -> Dict[str, Dict[int, int]]:
    search_index = dict()
    for i, document in enumerate(docs):
        for doc in document:
            key_doc = search_index.get(doc)
            if key_doc:
                if key_doc.get(i + 1):
                    key_doc[i + 1] += 1
                else:
                    key_doc[i + 1] = 1
            else:
                search_index[doc] = {i + 1: 1}
    return search_index


def input_data() -> Tuple[List[List[str]], List[Set[str]]]:
    n = int(input())
    docs = list()
    while n:
        docs.append(input().strip().split())
        n -= 1
    m = int(input())
    reqs = list()
    while m:
        reqs.append(set(input().strip().split()))
        m -= 1

    return docs, reqs


if __name__ == '__main__':
    solution(*input_data())

"""
ID успешной посылки: 64549716
-------------------------------------------------------------------------------
Задача:
Расстоянием Левенштейна между двумя строками s и t называется количество
атомарных изменений, с помощью которых можно одну строку превратить в другую.
Под атомарными изменениями подразумеваются: удаление одного символа, вставка
одного символа, замена одного символа на другой.
Найдите расстояние Левенштейна для предложенной пары строк.
Выведите единственное число — расстояние между строками.
-------------------------------------------------------------------------------
Алгоритм:
Алгоритм решения данной задачи прост, нам необходимо вычислить расстояние
Левенштейна, которое мы представляем в виде матрицы размером n на m, где n -
длина первой строки, m - длина второй строки. Для базового случая будем брать
саму последовательность, а далее с помощью алгоритма динамического программиро-
вания будем сравнивать символы на предыдущих позициях, и тут если они одинаковые
то берем ранее вычисленное расстояние, в противном случае - минимальное плюс 1.
-------------------------------------------------------------------------------
Сложность:
Временная сложность - O(n*m), где n - длина первой строки, m - второй.
Пространственная сложность - O(n*m), где n - длина первой строки, m - второй.
-------------------------------------------------------------------------------
Данные посылки:
1.069s 38.38Mb
-------------------------------------------------------------------------------
"""

from typing import List, Tuple


def solution(s: List[str], t: List[str]) -> int:
    n = len(s)
    m = len(t)
    dp = [[i] + [0] * m for i in range(n + 1)]
    dp[0] = list(range(0, m + 1))
    if m > 0 and n > 0:
        for i in range(1, n + 1):
            for j in range(1, m + 1):
                if s[i - 1] == t[j - 1]:
                    dp[i][j] = dp[i - 1][j - 1]
                else:
                    dp[i][j] = min(dp[i - 1][j - 1], dp[i][j - 1], dp[i - 1][j]) + 1

        return dp[n][m]
    else:
        return max(n, m)


def input_data() -> Tuple[List[str], List[str]]:
    s = list(input().strip())
    t = list(input().strip())
    return s, t


if __name__ == '__main__':
    print(solution(*input_data()))

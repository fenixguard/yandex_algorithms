"""
Привет! ID удачной посылки: 54886642
_____________________________________
Задача:
Обратная польская нотация. Она используется для парсинга арифметических выражений. Еще её иногда
называют постфиксной нотацией. В постфиксной нотации операнды расположены перед знаками операций.
Собственно задача реализовать данный алгоритм.
----------------------------------------------
Алгоритм решения следующий: мы зачитываем данные в список сплитуя по пробелам в функции input_data. Передаем полученный
массив на вход функции solution. Для решения данной задачи нам поможет структура данных Стек. Реализуем ее с помощью
класса Stack. Нам потребуется всего два метода, добавление и удаление элементов из стека.
Идем по входному листу. Если встречается число, то мы его добавляем в стек, если встречается знак операции, то мы
извлекаем два последних элемента из стека и производим над ними операцию. Необходимо следить за тем в какой
последовательности извлекаются элементы, чтобы операции выполнялись верно. В конце, когда лист в входными данными будет
пройден, то на вершине стека будет лежать ответ, его мы и печатаем.
----------------------------------------------
Сложность выполнения операций: добавление O(1),так как для реализации стека используем вспомогательную структуру массив,
и добавление в ней проиходит за O(1). Удаление из этой структуры также происходит за O(1). Выполнение арифметических
операций O(1).
По памяти мы займем O(n), где n - количество элементов в стеке.
----------------------------------------------
Данные посылки:
70ms 3.92Mb

"""
import operator
from typing import NoReturn, List

operators = {
        '+': operator.add,
        '-': operator.sub,
        '*': operator.mul,
        '/': operator.floordiv,
    }


class Stack:
    _stack = []

    def push(self, value: int):
        self._stack.append(value)

    def pop(self):
        return self._stack.pop()


def solution(expression: List[str]) -> NoReturn:
    stack = Stack()
    for exp in expression:
        if exp in operators:
            operand_2 = stack.pop()
            operand_1 = stack.pop()
            func = operators.get(exp)
            stack.push(func(operand_1, operand_2))
        else:
            stack.push(int(exp))

    print(stack.pop())


def input_data() -> List[str]:
    return input().rstrip().split()


if __name__ == '__main__':
    solution(input_data())
